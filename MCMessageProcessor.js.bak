const util = require('util');
const mcutils = require('./mcutils');
const MCMessage = require('./mcmessage');

function MCMessageProcessor(ws) {

    var self = this;

    this.requestHandlers = {};
    this.responseHandlers = {};

    this.ws = ws;

    this.ws.on('message', function (msg) {
        self.processMessage(msg);
    });

    this.registerRequestHandler('closewebsocket', function(msg) {
        console.log("closing socket");
        self.ws.close();
    });

    this.registerRequestHandler('geteduclientinfo', function(msg) {
        var resp = new MCMessage();
        resp.header.requestId = msg.header.requestId;
        resp.header.messagePurpose = "commandResponse";
        resp.body.clientuuid = self.ws.uuid;
        resp.body.companionProtocolVersion = 3;
        resp.body.isEdu = true;
        resp.body.isHost = true;
        resp.body.playersessionuuid = self.ws.playersessionuuid;
        resp.body.statusCode = 0;
        resp.body.userId = self.ws.userId;
        resp.body.tenantId = 'a82cd1c1-d2a6-4217-9e1a-18dd5fdb4cf2';

        self.ws.send(resp.toJson());
    });

    this.registerRequestHandler('enableencryption', function(msg) {
        var encData = msg.body.commandLine.split(" ");
        var peerPublicKey = encData[1];
        var salt = encData[2];

        var resp = new MCMessage();
        resp.header.requestId = msg.header.requestId;
        resp.header.messagePurpose = "commandResponse";
        resp.body.publicKey = self.ws.publicKeyX509;
        resp.body.statusCode = 0;
        resp.body.statusMessage = self.ws.publicKeyX509;

        self.ws.send(resp.toJson());

        self.ws.enableEncryption(peerPublicKey, salt);
    });
}

MCMessageProcessor.prototype.registerRequestHandler = function(commandName, handler) {
    console.log("Registering Request handler for Command: " + commandName);
    this.requestHandlers[commandName] = handler;
}

MCMessageProcessor.prototype.registerResponseHandler = function(requestId, handler) {
    console.log("Registering Response handler for Command: " + requestId);
    this.responseHandlers[requestId] = handler;
}

MCMessageProcessor.prototype.processRequest = function(msg) {
    var command = msg.body.commandLine.split(" ")[0];

    if(command in this.requestHandlers) {
        console.log("MC Request handler found: " + command);
        return this.requestHandlers[command](msg);
    }
    
    console.log("MC Request Handler not found: " + command);
}

MCMessageProcessor.prototype.processResponse = function(msg) {
    var requestId = msg.header.requestId;

    if(requestId in this.responseHandlers) {
        console.log("MC Response handler found: " + requestId);
        return this.responseHandlers[requestId](msg);
    }
    
    console.log("MC Response Handler not found: " + requestId);
}

MCMessageProcessor.prototype.processMessage = function(msg) {

    msg = JSON.parse(msg);

    var purpose = msg.header.messagePurpose;

    switch(purpose) {
        case "commandRequest":
            this.processRequest(msg);
            break;

        case "commandResponse":
            this.processResponse(msg);
            break;

        /*
        case "subscribe":
            this.events.subscribe(msg.body.eventName);
            break;

        case "unsubscribe":
            this.events.unsubscribe(msg.body.eventName);
            break;

        case "event":
            this.events.processEvent(msg.body.eventName, msg);
            break;
        */

        case "error":
            console.log("Error: " + JSON.stringify(msg));
            break;

        default:
            console.log("Unknown messagePurpose: " + purpose);
    }
}

module.exports = MCMessageProcessor;
